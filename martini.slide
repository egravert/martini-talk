The Martini Web Framework
A gentle introduction
14:00 27 Feb 2014
Tags: go webframework martini

Eric Gravert
Lead Software Engineer, ModCloth, Inc.
e.gravert@modcloth.com


* But first, a bit of background...

* Originally, we had net/http, and life was good

.play examples/http1.go /START OMIT/,/END OMIT/

- Register handlers with the DefaultServeMux
- Path matching is from most specific to least
- All handlers must of type func(ResponseWriter, *Request)


* net/http continued...
.play examples/http2.go /START OMIT/,/END OMIT/

- DefaultServeMux can be replaced with a custom dispatcher
- Any type that implements ServeHTTP(w ResponseWriter, req *Request) is valid


* net/http conclusion

net/http is an elegantly written, highly customizable, http server.
It is a great starting point for building your services and web applications.


* Introducing....

* Martini!!

.image MartiniGlass.png 370 200

* What is Martini?

- A Go package for developing web applications and services
- Implements http.Handler to extend the functionality of net/http
- Improves the routing capabilities by supporting HTTP Methods and regex pattern matching
- Provides additional services such as sessions, template rendering, and form field bindings through middleware
- Uses reflection and dependency injection to allow for handlers to be more flexible

* Our first example
.play examples/martini1.go


* Martini provides this functionality by adding the following features
- Advanced Router -  Multiplexer that routes an http request to a handler
- Handlers        - Any callable function
- Services        - Objects used to fulfill the argument requirements of handlers
- Middleware      - Global handlers.  They are called for every request, and often effect the request context

* Routing
Associates an HTTP Method and URL pattern to a series of Handlers

.play examples/martini1.go /START OMIT/,/END OMIT/ HLROUTE

- Supports Method based routes
- Routes can be matched with regular expressions and globs as well
- Route parameters can be accessed through `martini.Params`
- See [[http://godoc.org/github.com/codegangsta/martini#Router][martini.Router]] for more info

* Handlers
Are callable functions that are mapped to a given request by the router

- Can return a string or string and int to return a result and status to the client
- The arguments for handlers are provided through services
- If a handler returns a string, or (int, string) pair, the values will be written to the ResponseWriter
- A route can specify multiple, sequential handlers

* Stacking handlers

  // router configuration
  m.Post("/book/new", Authorize, AddBook)

  // leverage sessions package to see if user
  // has access to the given resource
  func Authorize(session sessions.Session) {
    // validate session cookie
  }

  func AddBook(req *http.Request, db sql.DB) {
    // parse the request and create a new book
  }


* Services
Services are the objects that can be injected into the handler argument list
they can be provided at two levels, globally, and per-request

- Adding a type service
  st := &Storer{}
  m.Map(st) // this service will be available to all handlers as *Storer

- Mapping a value to an interface
  st := &MysqlStorer{}
  m.MapTo(st, (*Storer)(nil)) // Maps type MysqlStorer to the Storer interface

- Mapping a service within a request
  // within a handler (global or request lvl)
  func MyHandler(c martini.Context, s sessions.Session, ul *UserLookup) {
    user := ul.LookupUser(s.Get("user-token"))
    c.Map(user)
  }

* Middleware
- Global handlers that are called for each request
- Router is the final middleware handler!
- Often used to add services to a request through `martini.Context`
- Useful for providing services like authorization, logging, and error pages and serving static pages
- A common patern is to implement middleware using a method that returns the handler. This allows capturing state within a closure
  store := sessions.NewCookieStore([]byte("secret123"))
  m.Use(sessions.Sessions("my_session", store)) // Sessions returns a function.
                                                // The function is a closure
                                                // that captures the session name and store

* Introducing Martini-contrib

* Render Middleware

Simplifies rendering HTML and JSON templates

- Supports layouts & supplies a `yield` function for layouts to access the current template
- Caching is supported and controlled through  the `MARTINI_ENV` env variable
- Uses html/template for the rendering language
- By default, templates are stored in `templates' directory, and referenced by the path + basename + ".tmpl"

  // add a middlware handler to enable rendering
  m.Use(render.Renderer(render.Options{Layout: "layout"}))

.code secondbrain/main.go /^func ShowNotes/,/^}/

* Binding Middleware
Binding middleware maps the values from an incoming request to a struct and passes it to the handler

- Uses struct tags to associate the request values to a field.
- Fields can be marked as required (supports nested requires) :)
- If a struct implements `binding.Validate`, the method will be called. If there is an error, an alternate handler can be specified. 

	// Tell the binder to populate the Note struct with form data
	m.Post("/create", binding.Bind(Note{}), NewNote)

	// The Note is now available as a handler argument

.code secondbrain/main.go /^func NewNote/,/^}/

* Static
Part of  `ClassicMartini`, the static middleware serves up static assets that reside in a specified directory.

- Defaults to public in Classic
- multiple locations can be specified by using multiple instances of the static middleware
  m.Use(martini.Static("assets")
  m.Use(martini.Static("public")
- Is relative to your binary's working directory

* And many more

- secure - Middleware that implements a few quick security wins
- auth - Handlers for authentication
- gzip - gzip all requests
- encoder - Encoder service for rendering data in multiple formats and content negotiation.

See the full list at [[https://github.com/martini-contrib][github.com/martini-contrib]]

* Testing
- Can use the "net/http/httptest"
- Make sure to design code to isolate the martini multiplexer from startup.

.code secondbrain/main_test.go /^func TestShowingNotes/,/^}/

* Testing a POST
.code secondbrain/main_test.go /^func TestCreatingNotes/,/^}/

* Putting it all together

Demo time!
[[http://localhost:8020][Second Brain]]

* Issues (here be opinions)
 - Does not provide a guide for how to structure a project
 - No tooling to help with packaging & deploying applications that include assets
 - Some of the middleware is very immature and is more useful as a guideline


* Further Reading
- [[https://github.com/codegangsta/martini][Martini Web Framework on Github]]
- [[https://github.com/martini-contrib][Martini Contrib on Github]]
- [[http://blog.gopheracademy.com/day-11-martini][Building a Christmas Wishlist with Martini]]
- [[https://gophercasts.io/][GopherCasts]]
